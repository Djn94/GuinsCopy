{"version":3,"sources":["logo.svg","components/navbar/Navbar.js","components/header/Header.js","components/footer/Footer.js","components/card/card.js","components/cardwrapper/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","style","navStyle","background","height","width","marginTop","paddingTop","textAlign","position","top","left","borderBottom","borderTop","Navbar","react_default","a","createElement","HeaderStyle","Header","className","id","footerStyle","fontSize","color","padding","bottom","ghostdiv","display","Footer","Card","props","_this","this","alt","name","src","image","onClick","Handleclick","Container","children","App","state","penguins","_this2","navbar_Navbar","header_Header","cardwrapper_Container","map","penguin","card","handleClick","key","footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iuEAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6NCClCC,eAAQ,CACVC,SAAU,CACNC,WAAY,SACZC,OAAQ,OACRC,MAAO,OACPC,UAAW,EACXC,WAAY,EACZC,UAAW,QACXC,SAAU,QACVC,IAAK,IACLC,KAAM,IACNC,aAAc,oBACdC,UAAW,uBAUJC,MAPf,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKhB,MAAOA,EAAMC,UACda,EAAAC,EAAAC,cAAA,qCCjBNhB,SAAQ,CACViB,YAAa,CACTf,WAAY,QACZG,UAAW,EACXF,OAAQ,OACRI,UAAW,SACXH,MAAO,UAUAc,MAPf,WACI,OAAQJ,EAAAC,EAAAC,cAAA,OAAKhB,MAAOA,EAAMiB,YAAaE,UAAU,aAC7CL,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,iBACLF,EAAAC,EAAAC,cAAA,MAAII,GAAG,gBAAP,2ECbFpB,EAAQ,CACVqB,YAAa,CACTnB,WAAY,OACZoB,SAAU,GACVC,MAAO,QACPX,UAAW,kBACXL,UAAW,SACXiB,QAAS,GACThB,SAAU,QACVE,KAAM,IACNe,OAAQ,IACRtB,OAAQ,MACRC,MAAO,QAGXsB,SAAU,CACNC,QAAS,QACTH,QAAS,OACTrB,OAAQ,OACRC,MAAO,SAaAwB,MAVf,WACI,OACId,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKhB,MAAOA,EAAM0B,WAClBZ,EAAAC,EAAAC,cAAA,OAAKhB,MAAOA,EAAMqB,aACdP,EAAAC,EAAAC,cAAA,QAAMI,GAAG,iBAAT,2BCLDS,MApBf,SAAcC,GAAO,IAAAC,EAAAC,KAQb,OACIlB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,OAAKiB,IAAKH,EAAMI,KAAMC,IAAKL,EAAMM,SAErCtB,EAAAC,EAAAC,cAAA,cAASc,EAAMI,MACfpB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,SAASkB,QAAS,kBAAMN,EAAKD,MAAMQ,YAAYR,EAAMV,MAArE,yBCVDmB,MAJf,SAAmBT,GACf,OAAOhB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aAAaW,EAAMU,WC6B9BC,6MAvBbC,MAAQ,CAAEC,oFACD,IAAAC,EAAAZ,KACP,OAAQlB,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,KACGf,KAAKU,MAAMC,SAASK,IAAI,SAAAC,GAAO,OAC9BnC,EAAAC,EAAAC,cAACkC,EAAD,CACEC,YAAaP,EAAKO,YAClB/B,GAAI6B,EAAQ7B,GACZgC,IAAKH,EAAQ7B,GACbgB,MAAOa,EAAQb,MACfF,KAAMe,EAAQf,UAIpBpB,EAAAC,EAAAC,cAACqC,EAAD,cAjBYC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.25c69e2e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nconst style = {\n    navStyle: {\n        background: 'yellow',\n        height: \"10vh\",\n        width: \"100%\",\n        marginTop: 0,\n        paddingTop: 0,\n        textAlign: \"right\",\n        position: \"fixed\",\n        top: \"0\",\n        left: \"0\",\n        borderBottom: \"3px, solid, black\",\n        borderTop: \"3px, solid, black\",\n    }\n}\nfunction Navbar() {\n    return (\n        <nav style={style.navStyle} >\n            <p>this is the navbar div</p></nav>\n\n    );\n}\nexport default Navbar;","import React from 'react';\nimport './style.css'\nconst style = {\n    HeaderStyle: {\n        background: 'green',\n        marginTop: 0,\n        height: \"22vh\",\n        textAlign: \"center\",\n        width: \"100%\",\n    }\n}\nfunction Header() {\n    return (<div style={style.HeaderStyle} className='headerDiv'>\n        <div><h2>hm</h2></div>\n        <h2 id=\"instructions\">Clck each cute penguin only once! Get twelve correct in a row to win.</h2>\n    </div >\n    );\n}\nexport default Header;","import React from 'react';\nconst style = {\n    footerStyle: {\n        background: 'blue',\n        fontSize: 20,\n        color: \"black\",\n        borderTop: \"3px solid black\",\n        textAlign: 'center',\n        padding: 20,\n        position: \"fixed\",\n        left: \"0\",\n        bottom: \"0\",\n        height: \"5vh\",\n        width: \"100%\",\n        \n    },\n    ghostdiv: {\n        display: \"block\",\n        padding: \"20px\",\n        height: \"10vh\",\n        width: \"100%\",\n    }\n}\nfunction Footer() {\n    return (\n        <div>\n            <div style={style.ghostdiv} />\n            <div style={style.footerStyle}>\n                <span id=\"copyrightText\">Copyright 2019</span>\n            </div>\n        </div>\n    );\n}\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n    // state = { isClicked: false };\n    //maybe I can do this.setstate somewhere\n    // handleClick = id => {\n\n    // }\n    //render()\n    {\n        return (\n            <div className=\"card\" >\n                <div className='img-container'>\n                    <img alt={props.name} src={props.image} />\n                </div>\n                <strong>{props.name}</strong>\n                <span className=\"select\" onClick={() => this.props.Handleclick(props.id)}>Select</span>\n            </div>\n        )\n    };\n};\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n    return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Container;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from \"./components/navbar/Navbar\";\nimport Header from './components/header/Header';\nimport Footer from './components/footer/Footer';\nimport Card from './components/card/card';\nimport penguins from './penguins.json';\nimport Container from './components/cardwrapper/Container'\nclass App extends Component {\n  state = { penguins }\n  render() {\n    return (<div>\n      <Navbar />\n      <Header />\n      <Container>\n        {this.state.penguins.map(penguin => (\n          <Card\n            handleClick={this.handleClick}\n            id={penguin.id}\n            key={penguin.id}\n            image={penguin.image}\n            name={penguin.name}\n          />\n        ))}\n      </Container>\n      <Footer />\n    </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}